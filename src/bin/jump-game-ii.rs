fn main() {
    assert_eq!(Solution::jump(vec![2, 3, 1, 1, 4]), 2);
    assert_eq!(Solution::jump(vec![2, 3, 0, 1, 4]), 2);
    println!(
        "{}",
        Solution::jump(vec![
            8, 4, 8, 2, 5, 6, 5, 3, 5, 3, 3, 1, 6, 5, 8, 7, 4, 6, 8, 2, 3, 1, 2, 7, 5, 1, 2, 1, 8,
            1, 3, 3, 7, 8, 8, 4, 2, 6, 5, 1, 7, 5, 6, 8, 2, 7, 5, 6, 7, 2, 2, 5, 7, 4, 4, 6, 8, 7,
            2, 4, 8, 5, 2, 3, 6, 3, 5, 1, 6, 8, 3, 1, 7, 7, 1, 8, 2, 3, 5, 8, 6, 5, 3, 4, 1, 8, 7,
            3, 7, 2, 1, 1, 2, 8, 5, 1, 8, 3, 5, 5, 3, 3, 8, 8, 1, 6, 1, 8, 5, 1, 1, 6, 6, 1, 8, 4,
            2, 3, 4, 6, 4, 8, 6, 7, 8, 6, 2, 3, 2, 6, 7, 1, 3, 4, 1, 5, 5, 3, 6, 5, 1, 5, 5, 1, 1,
            1, 4, 2, 5, 2, 6, 1, 5, 3, 5, 3, 7, 6, 7, 7, 1, 1, 6, 3, 5, 2, 6, 7, 5, 8, 2, 1, 2, 1,
            4, 7, 3, 6, 7, 2, 7, 1, 6, 4, 4, 6, 6, 6, 6, 3, 4, 5, 5, 1, 5, 3, 5, 7, 3, 4, 5, 3, 1,
            3, 7, 6, 2, 2, 5, 7, 7, 6, 3, 4, 2, 5, 4, 1, 3, 3, 6, 2, 1, 1, 3, 5, 7, 4, 5, 4, 8, 4,
            5, 7, 6, 7, 5, 5, 5, 4, 1, 6, 1, 6, 6, 3, 1, 8, 6, 3, 8, 5, 8, 7, 6, 8, 4, 5, 1, 5, 7,
            7, 1, 3, 5, 5, 4, 1, 4, 8, 2, 5, 5, 6, 3, 4, 8, 1, 5, 4, 1, 8, 2, 6, 5, 4, 8, 8, 5, 7,
            1, 8, 4, 1, 5, 5, 7, 1, 6, 5, 8, 4, 3, 3, 8, 7, 1, 4, 3, 1, 4, 5, 2, 7, 8, 3, 4, 4, 6,
            7, 7, 5, 4, 3, 2, 4, 2, 5, 2, 6, 8, 8, 2, 7, 8, 2, 6, 8, 5, 6, 3, 3, 4, 2, 3, 1, 4, 1,
            8, 8, 2, 5, 2, 1, 5, 8, 2, 8, 2, 4, 6, 8, 6, 6, 6, 5, 6, 8, 5, 7, 2, 1, 5, 2, 8, 8, 7,
            1, 1, 5, 2, 5, 6, 6, 3, 8, 3, 5, 6, 4, 5, 7, 8, 2, 6, 7, 4, 5, 7, 3, 8, 2, 4, 5, 1, 8,
            7, 5, 2, 8, 1, 7, 1, 3, 1, 1, 4, 4, 1, 1, 3, 3, 3, 8, 1, 8, 4, 5, 4, 7, 1, 1, 2, 6, 7,
            5, 8, 8, 1, 3, 8, 2, 7, 4, 8, 8, 1, 2, 5, 5, 5, 7, 4, 2, 2, 4, 6, 7, 6, 4, 3, 5, 8, 1,
            7, 6, 6, 2, 1, 6, 2, 5, 2, 8, 3, 3, 5, 7, 2, 1, 8, 5, 5, 6, 8, 8, 8, 8, 1, 3, 5, 2, 1,
            6, 3, 8, 4, 7, 8, 2, 8, 4, 2, 4, 8, 4, 2, 4, 6, 3, 7, 2, 1, 3, 5, 2, 5, 4, 7, 8, 7, 6,
            3, 3, 7, 6, 2, 4, 6, 7, 8, 6, 6, 4, 2, 8, 7, 5, 5, 8, 8, 8, 1, 2, 6, 1, 8, 1, 1, 4, 2,
            7, 8, 5, 6, 4, 7, 3, 7, 3, 2, 6, 5, 7, 8, 5, 1, 3, 3, 3, 6, 8, 7, 3, 3, 4, 7, 5, 8, 2,
            4, 7, 8, 1, 6, 8, 7, 5, 4, 2, 3, 3, 8, 8, 6, 3, 8, 2, 8, 6, 2, 2, 5, 8, 3, 7, 5, 8, 5,
            7, 2, 7, 1, 7, 2, 3, 1, 1, 8, 2, 4, 8, 8, 1, 2, 1, 2, 2, 8, 6, 6, 5, 1, 1, 1, 5, 1, 8,
            5, 6, 1, 4, 4, 8, 5, 8, 3, 3, 3, 5, 2, 5, 3, 7, 3, 5, 4, 3, 2, 4, 8, 7, 6, 4, 4, 4, 3,
            8, 7, 8, 2, 4, 6, 5, 6, 3, 4, 5, 3, 2, 6, 6, 7, 2, 5, 1, 5, 6, 2, 3, 4, 3, 3, 3, 3, 2,
            4, 3, 7, 1, 3, 5, 3, 2, 5, 5, 7, 6, 1, 2, 3, 2, 3, 8, 3, 6, 7, 4, 3, 8, 3, 7, 2, 7, 5,
            2, 6, 8, 2, 5, 1, 2, 8, 7, 8, 3, 1, 1, 7, 3, 6, 5, 7, 2, 8, 3, 3, 7, 2, 3, 7, 6, 1, 8,
            4, 5, 3, 3, 8, 5, 1, 1, 7, 3, 6, 1, 7, 6, 2, 2, 6, 1, 6, 8, 1, 7, 4, 1, 3, 4, 6, 6, 4,
            4, 3, 4, 4, 7, 5, 2, 2, 8, 7, 6, 5, 4, 3, 2, 8, 8, 2, 1, 3, 5, 7, 5, 2, 4, 7, 2, 2, 8,
            3, 8, 7, 4, 8, 5, 3, 3, 5, 5, 2, 1, 7, 6, 7, 1, 3, 3, 2, 2, 8, 8, 6, 2, 8, 3, 2, 3, 8,
            6, 4, 7, 7, 8, 2, 3, 6, 4, 8, 3, 3, 2, 1, 7, 6, 3, 8, 4, 8, 3, 1, 6, 3, 1, 2, 8, 8, 2,
            2, 7, 2, 5, 7, 3, 5, 8, 8, 3, 8, 6, 6, 2, 6, 6, 4, 7, 6, 1, 7, 8, 6, 8, 1, 2, 3, 3, 6,
            2, 7, 1, 2, 1, 1, 6, 8, 6, 6, 1, 2, 6, 8, 2, 4, 7, 1, 1, 3, 3, 7, 4, 8, 3, 4, 6, 3, 6,
            1, 6, 4, 3, 6, 7, 4, 8, 5, 7, 2, 3, 1, 5, 3, 5, 3, 3, 3, 6, 8, 6, 6, 8, 3, 8, 3, 6, 2,
            6, 4, 1, 6, 8, 1, 1, 6, 6, 6, 3, 6, 4, 7, 1, 1, 4, 2, 5, 5, 8, 2, 6, 8, 1, 7, 5, 4, 7,
            4, 7, 3, 1, 5, 7, 1, 5, 1, 1, 8, 2, 2, 3, 3, 4, 3, 7, 6, 1, 7, 2, 8, 5, 6, 5, 4, 8, 2,
            4, 3, 1, 2, 7, 3, 3, 3, 3, 4, 6, 2, 1, 4, 8, 1, 4, 3, 2, 7, 6, 8, 8, 7, 2, 3, 1, 4, 1,
            3, 3, 8, 8, 6, 2, 3, 3, 7, 3, 1, 5, 5, 2, 8, 8, 3, 7, 7, 7, 7, 3, 7, 3, 7, 4, 5, 5, 8,
            4, 8, 1, 4, 3, 7, 8, 5, 7, 1, 6, 2, 4, 3, 6, 5, 7, 2, 7, 5, 1, 1, 6, 3, 3, 7, 7, 7, 4,
            6, 7, 2, 3, 2, 8, 5, 7, 8, 7, 2, 7, 7, 8, 7, 3, 4, 4, 5, 3, 6, 2, 2, 1, 4, 8, 5, 1, 2,
            8, 4, 7, 8, 2, 1, 4, 4, 6, 5, 6, 2, 2, 6, 3, 1, 8, 1, 3, 3, 3, 8, 1, 3, 7, 7, 5, 8, 3,
            7, 3, 8, 3, 7, 8, 2, 1, 4, 4, 2, 7, 3, 8, 1, 8, 4, 8, 8, 6, 6, 8, 5, 2, 6, 2, 3, 6, 1,
            5, 2, 4, 6, 5, 6, 8, 3, 8, 2, 1, 8, 6, 8, 3, 2, 4, 3, 4, 7, 5, 6, 6, 6, 4, 8, 1, 5, 6,
            1, 1, 2, 6, 4, 3, 2, 1, 2, 4, 1, 4, 4, 8, 2, 8, 8, 2, 1, 2, 4, 4, 5, 1, 5, 5, 6, 2, 4,
            8, 4, 7, 3, 4, 2, 5, 7, 7, 3, 5, 5, 8, 5, 7, 5, 4, 4, 6, 5, 6, 5, 2, 5, 7, 4, 3, 5, 8,
            3, 7, 3, 7, 3, 7, 5, 8, 4, 3, 3, 4, 6, 1, 3, 3, 6, 2, 4, 5, 4, 4, 8, 4, 6, 5, 1, 1, 2,
            4, 7, 3, 8, 8, 1, 2, 3, 6, 7, 7, 4, 5, 3, 5, 7, 3, 4, 8, 8, 6, 6, 2, 3, 3, 8, 3, 1, 3,
            3, 2, 8, 3, 5, 7, 2, 6, 2, 7, 3, 3, 3, 7, 5, 1, 2, 7, 8, 4, 7, 1, 4, 6, 5, 1, 2, 6, 3,
            7, 7, 5, 4, 8, 7, 1, 1, 7, 2, 4, 7, 8, 5, 2, 6, 6, 5, 4, 8, 6, 1, 4, 5, 5, 3, 7, 4, 4,
            2, 3, 6, 8, 6, 8, 4, 1, 8, 2, 3, 8, 3, 1, 6, 2, 8, 6, 1, 4, 3, 4, 8, 6, 6, 5, 8, 7, 4,
            2, 1, 3, 7, 6, 7, 1, 3, 2, 2, 8, 1, 5, 2, 6, 7, 8, 2, 8, 5, 2, 3, 7, 7, 6, 8, 3, 4, 6,
            8, 2, 8, 7, 1, 4, 1, 3, 6, 1, 8, 2, 8, 6, 8, 7, 1, 2, 5, 6, 5, 3, 4, 7, 5, 3, 4, 8, 4,
            8, 3, 2, 7, 7, 6, 2, 4, 8, 1, 1, 2, 8, 6, 6, 2, 2, 4, 3, 8, 6, 7, 7, 1, 8, 7, 2, 2, 3,
            2, 4, 1, 2, 6, 3, 6, 8, 5, 1, 6, 4, 7, 4, 2, 4, 5, 6, 8, 3, 7, 1, 5, 2, 8, 1, 2, 6, 3,
            5, 4, 3, 3, 8, 2, 7, 1, 2, 1, 1, 8, 7, 6, 3, 8, 2, 8, 4, 2, 1, 1, 2, 3, 8, 8, 6, 5, 4,
            1, 5, 5, 7, 8, 2, 8, 6, 6, 3, 7, 1, 5, 2, 2, 5, 2, 6, 5, 7, 3, 2, 8, 7, 8, 3, 7, 6, 5,
            6, 7, 3, 4, 1, 3, 2, 3, 6, 4, 6, 1, 1, 8, 3, 2, 2, 1, 1, 4, 3, 4, 6, 6, 2, 8, 1, 6, 6,
            1, 1, 6, 8, 8, 6, 4, 8, 3, 4, 5, 5, 5, 8, 8, 5, 8, 2, 1, 4, 6, 6, 7, 3, 6, 8, 4, 3, 4,
            6, 3, 7, 8, 6, 1, 7, 1, 5, 1, 1, 6, 3, 3, 3, 7, 4, 1, 3, 1, 5, 1, 5, 4, 3, 4, 4, 6, 2,
            3, 8, 0, 0, 0, 0, 0, 0, 0,
        ])
    );
}

struct Solution;

impl Solution {
    /*
    f(0, t) = if可以直接从0跳到t { 1 } or { min((f(0,1)+f(1,t)), (f(0,2)+f(2,t))...) }
    O(n^3)
    */
    pub fn jump_slow(nums: Vec<i32>) -> i32 {
        let n = nums.len();
        let mut res = vec![n - 1; n * n];
        for d in 1..n {
            for i in 0..(n - d) {
                let j = i + d;
                if nums[i] as usize >= d {
                    res[n * i + j] = 1;
                } else {
                    let mut m = n - 1;
                    for k in (i + 1)..j {
                        m = Self::min(m, res[i * n + k] + res[k * n + j]);
                        if m == 2 {
                            break;
                        }
                    }
                    res[n * i + j] = m;
                }
            }
        }
        res[n - 1] as i32
    }

    fn min(a: usize, b: usize) -> usize {
        if a < b {
            a
        } else {
            b
        }
    }

    pub fn jump_2(nums: Vec<i32>) -> i32 {
        let n = nums.len();
        let mut rs = vec![-1; n];
        rs[0] = 0;
        for i in 0..n {
            if rs[i] == -1 {
                continue;
            }
            let d = n - 1 - i;
            let s = nums[i] as usize;
            for j in (i + 1)..=((if d < s { d } else { s }) + i) {
                if rs[j] == -1 {
                    rs[j] = rs[i] + 1;
                } else {
                    if rs[i] + 1 < rs[j] {
                        rs[j] = rs[i] + 1;
                    }
                }
            }
        }
        rs[n - 1]
    }

    pub fn jump(nums: Vec<i32>) -> i32 {
        let n = nums.len();
        if n <= 1 {
            return 0;
        }
        let mut m = nums[0];
        let mut s = nums[0];
        let mut j = 1;
        for i in 1..n {
            if i == n - 1 {
                return j;
            }
            if m < i as i32 + nums[i] {
                m = i as i32 + nums[i];
            }
            s -= 1;
            if s == 0 {
                j += 1;
                s = m - i as i32;
            }
        }
        return -1;
    }
}

fn main() {
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "i".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "l".to_string()
        ),
        2
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "le".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "leetc".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "leetcode".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "leetcodee".to_string()
        ),
        0
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "leetcodeee".to_string()
        ),
        0
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "app".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "apple".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "apples".to_string()
        ),
        1
    );
    assert_eq!(
        Solution::prefix_count(
            vec![
                "i".to_string(),
                "love".to_string(),
                "leetcode".to_string(),
                "apples".to_string()
            ],
            "applesa".to_string()
        ),
        0
    );
}

struct Solution;

impl Solution {
    pub fn prefix_count(words: Vec<String>, pref: String) -> i32 {
        words.iter().filter(|&w| w.starts_with(&pref)).count() as i32
    }
}
